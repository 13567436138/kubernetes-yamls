---
- name: KubeSphere | Create KubeSphere dir
  file:
    path: "{{ kubesphere_dir }}"
    state: directory
    mode: 0755

- name: KubeSphere | Getting installation init files
  copy:
    src: "{{ item }}"
    dest: "{{ kubesphere_dir }}/"
  loop:
    - "workspace.yaml"
    - "ks-init"
    - "ks-crds"

- name: KubeSphere | Create kubesphere namespace
  command: "{{ bin_dir }}/kubectl create namespace {{ item }}"
  register: import
  failed_when: "import.stderr and 'already exists' not in import.stderr"
  loop:
    - kubesphere-controls-system
    - kubesphere-system
    - openpitrix-system
    - kubesphere-monitoring-system
    - kubesphere-devops-system
    - kubesphere-logging-system
    - kubesphere-alerting-system
    - istio-system

- name: KubeSphere | Init KubeSphere system
  shell: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/ks-init/ks-init.yaml" 
  ignore_errors: true
  tags:
    - upgrade

- import_tasks: ks-init.yaml

- name: KubeSphere | Getting controls-system file 
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/{{ item.file }}"
  with_items:
    - { name: kubesphere-controls-system, file: kubesphere-controls-system.yaml }
  tags:
    - upgrade
     
- name: KubeSphere | Create KubeSphere crds
  shell: "{{ bin_dir }}/kubectl create -f {{ kubesphere_dir }}/ks-crds/" 
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"

- name: KubeSphere | Installing controls-system
  command: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/kubesphere-controls-system.yaml  -n kubesphere-controls-system"
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"
  tags:
    - upgrade

- name: KubeSphere | Create KubeSphere workspace
  shell: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/workspace.yaml" 
  register: result
  until: result is succeeded
  retries: 5
  delay: 3

- name: KubeSphere | Labeling system-workspace
  shell: >
    {{ bin_dir }}/kubectl label ns {{ item }} kubesphere.io/workspace=system-workspace && {{ bin_dir }}/kubectl annotate namespaces {{ item }} creator=admin
  register: import
  failed_when: "import.stderr and 'already' not in import.stderr"
  loop:
    - default
    - kube-public
    - kube-system
    - kubesphere-controls-system
    - kubesphere-system
    - openpitrix-system
    - kubesphere-monitoring-system
    - kubesphere-devops-system
    - kubesphere-logging-system
    - kubesphere-alerting-system
    - istio-system

- name: KubeSphere | Create ImagePullSecrets
  shell: |
    cat <<EOF | kubectl apply -f -
      apiVersion: v1
      kind: Secret
      metadata:
        name: qingcloud
        namespace: "{{ item }}"
      data:
        .dockerconfigjson: eyJhdXRocyI6eyJkb2NrZXJodWIucWluZ2Nsb3VkLmNvbSI6eyJhdXRoIjoiWjNWbGMzUTZaM1ZsYzNRPSJ9fX0=
      type: kubernetes.io/dockerconfigjson
    EOF
  loop:
    - default
    - kube-public
    - kube-system
    - kubesphere-controls-system
    - kubesphere-system
    - openpitrix-system
    - kubesphere-monitoring-system
    - kubesphere-devops-system
    - kubesphere-logging-system
    - kubesphere-alerting-system
    - istio-system  

    
- name: KubeSphere | Create KubeSphere vpa
  shell: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/ks-init/ks-vpa.yaml" 
  register: result
  until: result is succeeded
  retries: 5
  delay: 3
  when:
    - vertical_pod_autoscaler_enable == true

